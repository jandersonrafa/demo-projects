server.port=8082

 # actuator
spring.application.name=Service B
#indica que health deve mostrar detalhes sempre
management.endpoint.health.show-details=always
#alem do health e do info ele sempre vai export todos endpoints disponiveis
management.endpoints.web.exposure.include=*

info.app.name=@project.name@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@
management.info.env.enabled=true
management.endpoint.sessions.enabled=true

# basic auth credentials
# credencias para logar e acessar os endpoints actuator do client
spring.security.user.name=serviceblogin
spring.security.user.password=serviceblogin

# configurando o Spring Boot Admin Server
spring.boot.admin.client.url=http://localhost:8080
spring.boot.admin.client.instance.service-base-url=http://localhost:8082
spring.boot.admin.client.username=admin
spring.boot.admin.client.password=admin

# Configurando para inserir metadados com as credenciais para server conseguir
# chamar endpoints protegidos do client
spring.boot.admin.client.instance.metadata.user.name=${spring.security.user.name}
spring.boot.admin.client.instance.name=${spring.application.name}
spring.boot.admin.client.instance.metadata.user.password=${spring.security.user.password}

# redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.session.redis.namespace=yournamspace.v1
spring.session.timeout=12h
spring.main.allow-bean-definition-overriding=true

#logging.level.org.springframework.security=TRACE

variable.test=valora

management.endpoint.env.enabled=true
management.endpoint.env.show-values=ALWAYS
management.endpoint.env.post.enabled=true
management.endpoints.web.request-headers.enable=true
management.endpoint.refresh.enabled=true
